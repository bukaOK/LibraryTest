// <auto-generated />
using System;
using LibraryTest.DAL.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace LibraryTest.DAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20190721081114_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("LibraryTest.DAL.Entities.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ClientId");

                    b.Property<Guid>("GenreId");

                    b.Property<string>("ISBN");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("PagesCount");

                    b.Property<DateTime>("RegisterDate");

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("GenreId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("LibraryTest.DAL.Entities.BookMove", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("BookId");

                    b.Property<DateTime>("Date");

                    b.Property<DateTime?>("EndDate");

                    b.Property<int>("NewStatus");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("BookMoves");
                });

            modelBuilder.Entity("LibraryTest.DAL.Entities.ClassicBook", b =>
                {
                    b.Property<Guid>("BookId");

                    b.Property<int>("VolCount");

                    b.HasKey("BookId");

                    b.ToTable("ClassicBooks");
                });

            modelBuilder.Entity("LibraryTest.DAL.Entities.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<string>("Phone");

                    b.Property<DateTime>("RegisterDate");

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("LibraryTest.DAL.Entities.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("LibraryTest.DAL.Entities.Story", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<Guid>("StoryBookId");

                    b.HasKey("Id");

                    b.HasIndex("StoryBookId");

                    b.ToTable("Stories");
                });

            modelBuilder.Entity("LibraryTest.DAL.Entities.StoryBook", b =>
                {
                    b.Property<Guid>("BookId");

                    b.HasKey("BookId");

                    b.ToTable("StoryBooks");
                });

            modelBuilder.Entity("LibraryTest.DAL.Entities.Book", b =>
                {
                    b.HasOne("LibraryTest.DAL.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("LibraryTest.DAL.Entities.Genre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LibraryTest.DAL.Entities.BookMove", b =>
                {
                    b.HasOne("LibraryTest.DAL.Entities.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LibraryTest.DAL.Entities.ClassicBook", b =>
                {
                    b.HasOne("LibraryTest.DAL.Entities.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LibraryTest.DAL.Entities.Story", b =>
                {
                    b.HasOne("LibraryTest.DAL.Entities.StoryBook", "StoryBook")
                        .WithMany("Stories")
                        .HasForeignKey("StoryBookId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LibraryTest.DAL.Entities.StoryBook", b =>
                {
                    b.HasOne("LibraryTest.DAL.Entities.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
